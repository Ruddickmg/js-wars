{"version":3,"file":"buildingController.js","sourceRoot":"","sources":["buildingController.ts"],"names":[],"mappings":"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","sourcesContent":["import createPosition from \"../position\";\nimport {Player} from \"../../../../users/players/player\";\nimport {Building} from \"./building\";\nimport terrainController from \"../terrain/terrainController\";\nimport playerController from \"../../../../users/players/playerSocketListener\";\nimport createUnit from \"../unit/unit\";\nimport createDefaults from '../defaults';\nimport terrainDefaults from \"../terrain/properties\";\nimport buildingDefaults from \"../building/buildingDefaults\";\nimport unitDefaults from \"../unit/unitDefinitions\";\nimport {default as composer, Composer} from \"../../../../tools/composer\";\nimport players from \"../../../../users/players.js\";\n\nexport interface BuildingController {\n\n\n}\n\nexport default function () {\n\n\tconst\n        compose = composer(),\n        defaults = createDefaults(unitDefaults, buildingDefaults, terrainDefaults),\n        unitControllerParameters = {\n\n            playerId(element) {\n\n                let\n                    player = this.player(element),\n                    id: number | string;\n\n                if (!player) {\n\n                    player = element;\n                }\n\n                id = playerController.id(player);\n\n                return isNaN(id) ? player : id;\n            },\n            units:(element) => defaults.units(element),\n            health:(element) => defaults.health(element),\n            player:({player}:Building): Player => player,\n            getPlayer(element) {\n\n                const id = this.player(element);\n\n                if (!isNaN(id) || isString(id)) {\n\n                    return app.players.byId(id);\n                }\n\n                throw new Error(\"Invalid id pulled from element passed to \\\"getPlayer\\\".\");\n            },\n            color(element) {\n\n                return this.player(element) ? this.player(element).color() : \"default\";\n            },\n            restore(element) {\n\n                element.health = defaults.health(element);\n\n                return element;\n            },\n            indexOf(element) {\n\n                return element.index;\n            },\n            get(element) {\n\n                return app.map.buildings()[this.indexOf(element)];\n            },\n            selected({selected}) {\n\n                if (!isString(selected)) {\n\n                    throw new Error(\"parameter of building object: \\\"selected\\\" must be a string. in method: \\\"selected\\\".\");\n                }\n\n                return selected;\n            },\n            isHQ: function (building) {\n\n                return this.name(building) === \"hq\";\n            },\n            select: (selected, building) => {\n\n                if (!isString(selected)) {\n\n                    throw new Error(\"parameter of building object: \\\"selected\\\" must be a string, in method: \\\"select\\\".\");\n                }\n\n                building.selected = selected;\n\n                return building;\n\n            },\n            owns: (object1, object2) => {\n\n                return this.playerId(object1) === this.playerId(object2);\n            },\n            capture: (capture, element) => {\n\n                element.health -= capture;\n\n                return element;\n            },\n            // changeOwner: (players, element) => { // <--- remove, just use mapEditor\n            //\n            //     app.mapEditor.changeOwner(element, players);\n            //\n            //     return element;\n            // },\n            build: (type, element) => {\n\n                const\n                    playerId = this.playerId(element),\n                    position = this.position(element);\n\n                return createUnit(type, createPosition(position.x, position.y), playerId);\n            },\n            setPlayer: (player, element) => {\n\n                element.player = player;\n\n                return element;\n            },\n            canBuild: (type, element) => {\n\n                return defaults.build(element).indexOf(type) >= 0;\n            },\n            canHeal: (unit, element) => {\n\n                const\n                    canHeal = defaults.canHeal(element),\n                    transportation = defaults.transportation(unit);\n\n                return canHeal ? canHeal.indexOf(transportation) >= 0 : false;\n            }\n\t    };\n\n    return <BuildingController>compose.excluding(\"draw\")\n        .combine(unitControllerParameters, terrainController);\n}"]}