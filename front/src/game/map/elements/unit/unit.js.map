{"version":3,"file":"unit.js","sourceRoot":"","sources":["unit.ts"],"names":[],"mappings":";;AAAA,0CAAgE;AAChE,mDAAyE;AACzE,yDAAyE;AACzE,yDAA6E;AAC7E,0CAAyC;AACzC,iDAA0C;AAC1C,sDAAoD;AACpD,mEAA4D;AAE5D,6DAAsD;AAgCtD,MACI,SAAS,GAAG,CAAC,EAAS,KAAK,EAAE,GAAG,CAAC,EACjC,SAAS,GAAG,CAAC,EAAS,KAAK,EAAE,GAAG,CAAC,EACjC,QAAQ,GAAuB,kBAAU,CAAS,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;AAE/E,mBAAwB,IAAI,EAAE,QAAQ,EAAE,MAAM;IAE1C,MACI,yBAAyB,GAAa,kBAAQ,EAAE,EAChD,UAAU,GAAG,yBAAe,CAAC,IAAI,CAAC,EAClC,QAAQ,GAAG,kBAAc,CAAC,sBAAY,CAAC,UAAU,CAAC,EAAE,0BAAgB,EAAE,oBAAe,CAAC,EACtF,UAAU,GAAG,kBAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,EACtD,eAAe,GAAG,EAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAC,EAC5C,cAAc,GAAG;QAEb,EAAE,EAAE,QAAQ,CAAC,GAAG,EAAE;QAClB,QAAQ,EAAE,kBAAc,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;QAChD,OAAO,EAAE,EAAE;QACX,OAAO,EAAE,EAAE;QACX,MAAM,EAAE,EAAE;QACV,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE;QACzB,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC;QACpC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC;QACpC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC;QACxC,QAAQ,EAAE,CAAC;QACX,KAAK,EAAE,EAAE;QACT,KAAK,EAAE,CAAC;QACR,UAAU,EAAE,KAAK;QACjB,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC;QACxC,MAAM,EAAE,KAAK;KAChB,CAAC;IAEN,MAAM,CAAO,yBAAyB,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC;SACtE,OAAO,CAAC,eAAe,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;AAC9D,CAAC;AA7BD,4BA6BC;AAAA,CAAC","sourcesContent":["import {default as createPosition, Position} from \"../position\";\nimport {default as createBuilding, Building} from \"../building/building\";\nimport {default as composer, Composer} from \"../../../../tools/composer\";\nimport {default as identifier, Identifier} from \"../../../../tools/identity\";\nimport createDefaults from \"../defaults\";\nimport unitDefaults from \"./unitDefaults\";\nimport terrainDefaults from \"../terrain/properties\";\nimport buildingDefaults from \"../building/buildingDefaults\";\nimport {Player} from \"../../../../users/players/player\";\nimport unitDefinitions from '../unit/unitDefinitions';\n\nexport type UnitId = string | number;\nexport type Target = Unit | Building;\nexport type Action = string;\n\ninterface Actions {\n\n    [index: string]: Action\n}\n\nexport interface Unit {\n\n    type: string,\n    name: string,\n    id: UnitId,\n    player: Player,\n    position: Position,\n    moves: Position[],\n    movement: number,\n    actions: Actions,\n    damage: number[],\n    targets: Target[],\n    health: number,\n    fuel: number,\n    vision: number,\n    selectable: boolean,\n    loaded?: Unit[],\n    moved: number,\n    action: string\n}\n\nconst\n    increment = (id:number) => id + 1,\n    decrement = (id:number) => id - 1,\n    identity: Identifier<number> = identifier<number>(1, increment, decrement);\n\nexport default function(type, position, player): Unit {\n\n    const\n        selectivelyCombineObjects: Composer = composer(),\n        definition = unitDefinitions[type],\n        defaults = createDefaults(unitDefaults(definition), buildingDefaults, terrainDefaults),\n        baseObject = createBuilding(type, position, player, 0),\n        unitNameAndType = {type: \"unit\", name: type},\n        unitProperties = {\n\n            id: identity.get(),\n            position: createPosition(position.x, position.y),\n            actions: {},\n            targets: [],\n            damage: [],\n            health: defaults.health(),\n            ammo: defaults.ammo(unitNameAndType),\n            fuel: defaults.fuel(unitNameAndType),\n            vision: defaults.vision(unitNameAndType),\n            movement: 0,\n            moves: [],\n            moved: 0,\n            selectable: false,\n            loaded: defaults.loaded(unitNameAndType),\n            action: false\n        };\n\n    return <Unit>selectivelyCombineObjects.excluding(\"type\", \"health\", \"index\")\n        .combine(unitNameAndType, unitProperties, baseObject);\n};"]}