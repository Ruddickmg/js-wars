{"version":3,"file":"position.js","sourceRoot":"","sources":["position.ts"],"names":[],"mappings":";;AAmBA,wBAAuC,CAAS,EAAE,CAAS,EAAE,cAAoB,EAAE,EAAE,aAA2B;IAE5G,MAAM,MAAM,GAAG,CAAC,SAAqB;QAEjC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,gBAA4B,EAAE,QAAkB;YAErE,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAEnB,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpC,CAAC;YAED,MAAM,CAAC,gBAAgB,CAAC;QAE5B,CAAC,EAAE,EAAE,CAAC,CAAC;IACX,CAAC,CAAC;IAEF,MAAM,CAAC;QAEH,CAAC,EAAC,CAAC;QACH,CAAC,EAAC,CAAC;QACH,WAAW,EAAE,WAAW;QACxB,EAAE,EAAE,CAAC,EAAC,CAAC,EAAE,CAAC,EAAc,KAAc,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC;QAClE,QAAQ,EAAE,MAAc,QAAQ,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG;QACvD,KAAK;YAED,MAAM,EAAC,CAAC,EAAE,CAAC,EAAC,GAAG,aAAa,CAAC;YAE7B,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;gBACd,IAAI,CAAC,CAAC,IAAI,CAAC;gBACX,IAAI,CAAC,CAAC,GAAG,CAAC;gBACV,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC;QACD,SAAS;YAEL,MACI,EAAC,CAAC,EAAE,CAAC,EAAC,GAAG,IAAI,EACb,SAAS,GAAe;gBAEpB,cAAc,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,aAAa,CAAC;gBAC/C,cAAc,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,aAAa,CAAC;gBAChD,cAAc,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,aAAa,CAAC;gBAC/C,cAAc,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,aAAa,CAAC;aACnD,CAAC;YAEN,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC7B,CAAC;QACD,OAAO;YAEH,MACI,EAAC,CAAC,EAAE,CAAC,EAAC,GAAG,IAAI,EACb,SAAS,GAAe;gBAEpB,cAAc,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,aAAa,CAAC;gBACxD,cAAc,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,aAAa,CAAC;gBACxD,cAAc,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,aAAa,CAAC;gBACxD,cAAc,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,aAAa,CAAC;aAC3D,CAAC;YAEN,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC7B,CAAC;QACD,WAAW;YAEP,MACI,kBAAkB,GAAG,IAAI,CAAC,SAAS,EAAE,EACrC,mBAAmB,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAEzC,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAC1D,CAAC;KACJ,CAAA;AACL,CAAC;AArED,iCAqEC;AAAA,CAAC","sourcesContent":["export interface Position {\n\n    x: number,\n    y: number,\n    orientation?: string,\n    on(position: Position): boolean,\n    toString(): string,\n    inMap(): boolean,\n    neighbors(): Position[],\n    corners(): Position[],\n    surrounding(): Position[]\n}\n\ninterface Coordinates {\n\n    x: number,\n    y: number\n}\n\nexport default function createPosition(x: number, y: number, orientation: string=\"\", mapDimensions?: Coordinates): Position {\n\n    const filter = (positions: Position[]): Position[] => {\n\n        return positions.reduce((allowedPositions: Position[], position: Position): Position[] => {\n\n            if (position.inMap()) {\n\n                allowedPositions.push(position);\n            }\n\n            return allowedPositions;\n\n        }, []);\n    };\n\n    return {\n\n        x:x,\n        y:y,\n        orientation: orientation,\n        on: ({x, y}: Coordinates): boolean => this.x === x && this.y === y,\n        toString: (): string => `{ x: ${this.x}, y: ${this.y}}`,\n        inMap(): boolean {\n\n            const {x, y} = mapDimensions;\n\n            return this.x >= 0 &&\n                this.y >= 0 &&\n                this.x < x &&\n                this.y < y;\n        },\n        neighbors(): Position[] {\n\n            const\n                {x, y} = this,\n                positions: Position[] = [\n\n                    createPosition(x - 1, y, 'west', mapDimensions),\n                    createPosition(x, y - 1, 'south', mapDimensions),\n                    createPosition(x + 1, y, 'east', mapDimensions),\n                    createPosition(x, y + 1, 'north', mapDimensions)\n                ];\n\n            return filter(positions);\n        },\n        corners(): Position[] {\n\n            const\n                {x, y} = this,\n                positions: Position[] = [\n\n                    createPosition(x - 1, y - 1, 'northWest', mapDimensions),\n                    createPosition(x + 1, y - 1, 'southEast', mapDimensions),\n                    createPosition(x + 1, y + 1, 'northEast', mapDimensions),\n                    createPosition(x - 1, y + 1, 'southWest', mapDimensions)\n                ];\n\n            return filter(positions);\n        },\n        surrounding(): Position[] {\n\n            const\n                neighboringSquares = this.neighbors(),\n                squaresOnEachCorner = this.corners();\n\n            return neighboringSquares.concat(squaresOnEachCorner);\n        }\n    }\n};"]}