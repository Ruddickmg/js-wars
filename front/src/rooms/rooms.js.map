{"version":3,"file":"rooms.js","sourceRoot":"","sources":["rooms.ts"],"names":[],"mappings":"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","sourcesContent":["import {Backend, default as connectToBackend} from \"../connections/backend\";\nimport {Game} from \"../game/game\";\nimport {default as identifier, Identifier} from \"../tools/identity.js\";\nimport {default as createLobby, Lobby} from \"./lobby.js\";\nimport {default as createRoom, Room, RoomId} from \"./room.js\";\n\nexport type AnyRoom = Room | Lobby;\n\nexport interface OpenRooms {\n\n    [index: string]: Game[];\n}\n\ninterface ListOfRooms {\n\n    [index: string]: Room;\n}\n\ninterface Categories {\n\n    [index: string]: ListOfRooms | Lobby;\n}\n\nexport interface Rooms {\n\n    get(id: RoomId): Room;\n    addReservedIds(ids: RoomId[]): Rooms;\n    lobby(): Lobby;\n    category(category: string): object;\n    add(game: Game): Room;\n    remove(room: Room): Room;\n    getOpenRooms(category: string): Game[];\n    getRunningRooms(category: string): Game[];\n    matchRunningGames(games: Game[]): Game[];\n}\n\nexport function isRoom(room: AnyRoom): room is Room {\n\n    return (room as Room).getGame !== undefined;\n}\n\nexport default function(url: string): Rooms {\n\n    const backend: Backend = connectToBackend(url);\n    const restrictedRoomNames: string[] = [\"lobby\"];\n    const restricted: any = restrictedRoomNames.reduce((roomNames: any, name: string): object => {\n\n        roomNames[name] = true;\n\n        return roomNames;\n\n    }, {});\n    const all: ListOfRooms = {};\n    const incrementId = (id: number): number => id + 1;\n    const decrementId = (id: number): number => id - 1;\n    const identity: Identifier<RoomId> = identifier<RoomId>(0, incrementId, decrementId);\n    const canEdit = (name: string): boolean => !restricted[name];\n    const canAdd = (name: string, id: RoomId): boolean => canEdit(name) && !get(id);\n    const categories: Categories = {lobby: createLobby(identity.get())};\n    const getOrCreateCategory = (category: string): any => {\n\n        if (!categories[category]) {\n\n            categories[category] = {};\n        }\n\n        return categories[category];\n    };\n    const get = (id: RoomId): Room => all[id];\n    const getOpenRooms = (category: string): OpenRooms => {\n\n        const rooms: any = categories[category];\n\n        return Object.keys(rooms).reduce((openRooms: OpenRooms, id: string): OpenRooms => {\n\n            const room: Room = rooms[id];\n            const type: string = room.hasStarted() ? \"running\" : \"open\";\n\n            if (!room.isFull()) {\n\n                openRooms[type].push(room.getGame());\n            }\n\n            return openRooms;\n\n        }, {open: [], running: []});\n    };\n\n    return {\n\n        add(game: Game): Room {\n\n            const id: RoomId = game.id || identity.get();\n            const newRoom: Room = createRoom(id, game);\n            const category: string = newRoom.category();\n\n            if (canAdd(newRoom.name(), newRoom.id())) {\n\n                if (newRoom.hasBeenSaved()) {\n\n                    getOrCreateCategory(category)[id] = newRoom;\n                }\n\n                return newRoom;\n            }\n        },\n        addReservedIds(ids: RoomId[]): Rooms {\n\n            identity.reserveIds(ids);\n\n            return this;\n        },\n        category: getOrCreateCategory,\n        get,\n        getOpenRooms: (category: string): Game[] => getOpenRooms(category).open,\n        getRunningRooms: (category: string): Game[] => getOpenRooms(category).running,\n        lobby: (): Lobby => categories.lobby as Lobby,\n        matchRunningGames(games: Game[]): Game[] {\n\n            const gameList: Game[] = [];\n\n            games.forEach((game: Game): void => {\n\n                const storedGame: Game = get(game.id).getGame();\n\n                gameList.push(storedGame || game);\n            });\n\n            return gameList.reverse();\n        },\n        remove(room: Room): Room {\n\n            const roomBeingRemoved: Room = room;\n            const storedRoom: Room = get(roomBeingRemoved.id());\n            const category: any = categories[storedRoom.category()];\n            const roomId: RoomId = storedRoom.id();\n            const userHasStatedTheyDoNotWishToSave: boolean = !room.hasBeenSaved() && storedRoom.hasBeenSaved();\n\n            if (canEdit(roomBeingRemoved.name()) && storedRoom.isSameAs(roomBeingRemoved)) {\n\n                if (category) {\n\n                    delete category[roomId];\n                }\n\n                delete all[roomId];\n\n                if (userHasStatedTheyDoNotWishToSave) {\n\n                    identity.remove(roomId);\n                    backend.deleteGame(storedRoom.id())\n                        .catch((error: Error) => console.log(error));\n                }\n            }\n\n            return storedRoom;\n        },\n    };\n}\n"]}