{"version":3,"file":"pubSub.js","sourceRoot":"","sources":["pubSub.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by moonmaster on 5/13/17.\n */\n\nimport {default as identifier, Identifier} from \"./identity\";\nimport {default as single} from \"./singleton\";\n\nexport interface PubSub {\n\n    publish(eventId: string, data: any): void;\n    subscribe(event: string, handler: Emitter): number;\n    unsubscribe(id: number, event?: string): Subscriber;\n}\n\ninterface Event {\n\n    name: string;\n    subscribers: Subscriber[];\n    timeOfLastUpdate: Date;\n}\n\ninterface Events {\n\n    [index: string]: Event;\n}\n\nexport interface Subscriber {\n\n    id: number;\n    emit: Emitter;\n}\n\ntype Emitter = (data: any, timeSinceLastUpdate: number) => any;\n\nfunction publishSubscribe(): PubSub {\n\n    const events: Events = {};\n    const increment = (id: number) => id + 1;\n    const decrement = (id: number) => id - 1;\n    const identity: Identifier<number> = identifier<number>(1, increment, decrement);\n\n    const createEvent = (name: string): Event => ({name, subscribers: [], timeOfLastUpdate: new Date()});\n\n    const createSubscriber = (eventHandler: Emitter): Subscriber => {\n\n        return {\n\n            emit: eventHandler,\n            id: identity.get(),\n        };\n    };\n\n    const getEvent = (name: string): Event => {\n\n        if (!events[name]) {\n\n            events[name] = createEvent(name);\n        }\n\n        return events[name];\n    };\n\n    const removeEvent = (name: string): Event => {\n\n        const event = events[name];\n\n        delete events[name];\n\n        return event;\n    };\n\n    const iterateThroughEvents = (callback: (event: Event) => any): any => {\n\n        const eventIds = Object.keys(events);\n\n        let indexOfEventId = eventIds.length;\n        let nameOfEvent;\n        let result;\n\n        while (indexOfEventId--) {\n\n            nameOfEvent = eventIds[indexOfEventId];\n            result = callback(events[nameOfEvent]);\n\n            if (result) {\n\n                return result;\n            }\n        }\n    };\n\n    const removeSubscriberFromEvent = (id: number, event: Event): Subscriber => {\n\n        const nonExistentIndex = -1;\n        const elementsToRemoveFromEvents = 1;\n        const firstElementInReturnedArray = 0;\n        const subscribers = event.subscribers;\n        const indexOfSubscriber = subscribers.findIndex((subscriber) => subscriber.id === id);\n\n        let subscriber;\n        let arrayOfSplicedOutSubscribers;\n\n        if (indexOfSubscriber > nonExistentIndex) {\n\n            arrayOfSplicedOutSubscribers = subscribers.splice(indexOfSubscriber, elementsToRemoveFromEvents);\n            subscriber = arrayOfSplicedOutSubscribers[firstElementInReturnedArray];\n\n            if (!subscribers.length) {\n\n                removeEvent(event.name);\n            }\n\n            return subscriber;\n        }\n    };\n\n    const removeSubscriberById = (id: number): Subscriber => {\n\n        return iterateThroughEvents((event: Event): Subscriber => {\n\n            return removeSubscriberFromEvent(id, event);\n        });\n    };\n\n    const addSubscriber = (subscribers: Subscriber[], eventHandler: Emitter): number => {\n\n        const subscriber = createSubscriber(eventHandler);\n\n        subscribers.push(subscriber);\n\n        return subscriber.id;\n    };\n\n    const getSubscribers = (name: string) => getEvent(name).subscribers;\n\n    const subscribe = (event: string, handler: Emitter): number => {\n\n        return addSubscriber(getSubscribers(event), handler);\n    };\n\n    const publish = (eventId: string, data: any): void => {\n\n        const event = getEvent(eventId);\n        const subscribers = getSubscribers(eventId);\n        const subscriptionIds: string[] = Object.keys(subscribers);\n        const currentTime: Date = new Date();\n        const timeOfLastUpdate: Date = event.timeOfLastUpdate;\n        const timeSinceLastUpdate = Number(currentTime) - Number(timeOfLastUpdate);\n\n        let indexOfUnnotifiedSubscriberId = subscriptionIds.length;\n        let subscriptionId: any;\n        let subscriber: Subscriber;\n\n        event.timeOfLastUpdate = currentTime;\n\n        while (indexOfUnnotifiedSubscriberId--) {\n\n            subscriptionId = subscriptionIds[indexOfUnnotifiedSubscriberId];\n            subscriber = subscribers[subscriptionId];\n\n            subscriber.emit(data, timeSinceLastUpdate);\n        }\n    };\n\n    const unsubscribe = (id: number, event?: string): Subscriber => {\n\n        identity.remove(id);\n\n        if (event) {\n\n            return removeSubscriberFromEvent(id, events[event]);\n        }\n\n        return removeSubscriberById(id);\n    };\n\n    return {\n\n        publish,\n        subscribe,\n        unsubscribe,\n    };\n}\n\nexport default single(publishSubscribe());\n"]}