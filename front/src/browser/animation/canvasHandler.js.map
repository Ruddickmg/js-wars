{"version":3,"file":"canvasHandler.js","sourceRoot":"","sources":["canvasHandler.ts"],"names":[],"mappings":";;AAAA,2CAAsE;AActE;IAEI,MAAM,QAAQ,GAAa,EAAE,CAAC;IAE9B,MAAM,CAAC;QAEH,GAAG,EAAC,CAAC,IAAY,KAAuB,QAAQ,CAAC,IAAI,CAAC;QACtD,GAAG,CAAC,IAAY,EAAE,WAAoB;YAElC,QAAQ,CAAC,IAAI,CAAC,GAAG,mBAAY,CAAC,GAAG,IAAI,QAAQ,EAAE,WAAW,CAAC,CAAC;YAE5D,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,IAAY;YAEf,MAAM,MAAM,GAAqB,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEhD,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEtB,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;KACJ,CAAC;AACN,CAAC;AAtBD,4BAsBC","sourcesContent":["import {default as createCanvas, CanvasController} from \"./canvas.js\";\n\ninterface Canvases {\n\n    [index: string]: CanvasController\n}\n\nexport interface CanvasHandler {\n\n    get(name: string): CanvasController\n    add(name: string, contextType?: string): CanvasHandler\n    remove(name: string): CanvasController\n}\n\nexport default function(): CanvasHandler {\n\n    const canvases: Canvases = {};\n\n    return {\n\n        get:(name: string): CanvasController => canvases[name],\n        add(name: string, contextType?: string): CanvasHandler {\n\n            canvases[name] = createCanvas(`${name}Canvas`, contextType);\n\n            return this;\n        },\n        remove(name: string): CanvasController {\n\n            const canvas: CanvasController = canvases[name];\n\n            delete canvases[name];\n\n            return canvas;\n        }\n    };\n}"]}