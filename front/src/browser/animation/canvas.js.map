{"version":3,"file":"canvas.js","sourceRoot":"","sources":["canvas.ts"],"names":[],"mappings":";;AAAA,iEAA2E;AAC3E,6CAAqE;AAWrE,mBAAwB,WAAmB,EAAE,cAAoB,IAAI;IAEjE,MACI,MAAM,GAAQ,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,EAClD,OAAO,GAAQ,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,EAC7C,KAAK,GAAQ,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAC5C,WAAW,GAAW,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,EACnD,YAAY,GAAW,UAAU,CAAC,KAAK,CAAC,YAAY,CAAC,EACrD,OAAO,GAAW,WAAW,GAAG,YAAY,EAC5C,KAAK,GAAW,MAAM,CAAC,WAAW,GAAG,OAAO,EAC5C,MAAM,GAAW,MAAM,CAAC,YAAY,GAAG,OAAO,EAC9C,UAAU,GAAe,oBAAgB,CAAC,KAAK,EAAE,MAAM,CAAC,EACxD,+BAA+B,GAAsB,8BAAI,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,EACtF,WAAW,GAAG,MAAY,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAErE,IAAI,UAAe,CAAC;IAEpB,MAAM,CAAC;QACH,GAAG,EAAC,MAAW,MAAM;QACrB,OAAO,EAAC,MAAW,OAAO;QAC1B,MAAM,EAAC,MAAc,KAAK,GAAG,MAAM;QAEnC,MAAM,CAAC,wBAAgC,EAAE,YAAqB;YAE1D,MAAM,IAAI,GAAQ,+BAA+B,CAAC,wBAAwB,CAAC,CAAC;YAE5E,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;gBAErB,MAAM,IAAI,KAAK,CAAC,2DAA2D,wBAAwB,iCAAiC,CAAC,CAAA;YACzI,CAAC;YAED,WAAW,EAAE,CAAC;YAEd,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAEf,+BAA+B,CAAC,kBAAkB,EAAE,CAAC;YACzD,CAAC;YAED,IAAI,EAAE,CAAC;YAEP,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,UAAU,EAAC,MAAkB,oBAAgB,CAAC,KAAK,EAAE,MAAM,CAAC;KAC/D,CAAC;AACN,CAAC;AA5CD,4BA4CC","sourcesContent":["import {default as draw, DrawingController}  from \"./drawingController.js\";\nimport {default as createDimensions, Dimensions} from \"./dimensions\";\n\nexport interface CanvasController {\n\n    pixels(): number\n    get(): any\n    context(): any\n    render(nameForClassOfAnimations: string, hide: boolean, gridSquareSize?: number): CanvasController\n    dimensions(): Dimensions\n}\n\nexport default function(elementName: string, contextType: string=\"2d\"): CanvasController {\n\n    const\n        canvas: any = document.getElementById(elementName),\n        context: any = canvas.getContext(contextType),\n        style: any = window.getComputedStyle(canvas),\n        leftPadding: number = parseFloat(style.paddingLeft),\n        rightPadding: number = parseFloat(style.paddingRight),\n        padding: number = leftPadding + rightPadding,\n        width: number = canvas.clientWidth - padding,\n        height: number = canvas.clientHeight - padding,\n        dimensions: Dimensions = createDimensions(width, height),\n        drawingsForEachClassOfAnimation: DrawingController = draw(canvas, context, dimensions),\n        clearScreen = (): void => context.clearRect(0, 0, width, height);\n\n    let animations: any;\n\n    return {\n        get:(): any => canvas,\n        context:(): any => context,\n        pixels:(): number => width * height,\n\n        render(nameForClassOfAnimations: string, hideDrawings: boolean): CanvasController {\n\n            const draw: any = drawingsForEachClassOfAnimation[nameForClassOfAnimations];\n\n            if (draw === undefined) {\n\n                throw new Error(`Invalid name for animations passed to render on canvas: ${nameForClassOfAnimations} does not exist in draw module.`)\n            }\n\n            clearScreen();\n\n            if (hideDrawings) {\n\n                drawingsForEachClassOfAnimation.hideCurrentElement();\n            }\n\n            draw();\n\n            return this;\n        },\n        dimensions:(): Dimensions => createDimensions(width, height)\n    };\n}"]}