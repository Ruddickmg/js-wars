{"version":3,"file":"screenController.js","sourceRoot":"","sources":["screenController.ts"],"names":[],"mappings":"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","sourcesContent":["import {default as createPosition, Position} from \"../../game/map/elements/position.js\";\nimport {default as time, Time} from \"../../tools/calculations/time\";\nimport {default as createDimensions, Dimensions} from \"./dimensions\";\nimport {AnimationHandler} from \"./animationHandler.js\";\n\nimport cursor = require(\"../controller/cursorController.js\");\nimport app = require('../configuration/settings/app.js');\n\nexport interface ScreenController {\n\n    width(): number\n    height(): number\n    pixels(): number\n    dimensions(): Dimensions\n    position(): Position\n    top(): number\n    bottom(): number\n    left(): number\n    right(): number\n    focused(): boolean\n    setDimensions(dimensions: Dimensions, base: number): ScreenController\n    reset(): ScreenController\n    scroll(): ScreenController\n    moveTo(coordinates): ScreenController\n    focus(): ScreenController\n    withinDimensions({x, y}: Position): boolean\n}\n\nexport default function(mapDimensions: Dimensions, animation: AnimationHandler): ScreenController {\n\n    let\n        squaresFromEdgeBeforeMoving: number = 2,\n        cursorBoundary: number = 1,\n        bottomOrLeftEdgeOfScreen: number = 0,\n        scrollSpeed: number = 50,\n        focused: boolean = false,\n        screenDimensions: Dimensions,\n        dimensions: Dimensions;\n\n\tconst\n        screenPosition: Position = createPosition(0,0),\n        listOfAxis: string[] = ['x', 'y'],\n        periodOfTime: Time = time(),\n\t\trefreshScreen = (): AnimationHandler => animation.show('terrain', 'cursor', 'building', 'unit', 'effects'),\n\t\trefreshMap = (): AnimationHandler => animation.show(\"unit\",\"building\"),\n        moveScreen = (distance: number, position: number, limit: number, sign: number, axis: string): void => {\n\n            const\n                minimumDistance: number = 0,\n                withinMapDimensions = (view: number, sign: number, limit: number): boolean => view * sign + sign < limit,\n                movementStillRemains = (distance: number): boolean => distance >= minimumDistance;\n\n            periodOfTime.wait(scrollSpeed)\n                .then((): void => {\n\n                    if (movementStillRemains(distance) && withinMapDimensions(position, sign, limit)) {\n\n                        screenPosition[axis] += sign;\n                        refreshScreen();\n                        moveScreen(distance - 1, position + sign, limit, sign, axis);\n                    }\n                })\n                .catch((error: Error): void => console.log(error));\n        },\n        cursorAtBottomOrLeftOfScreen = (cursorPosition: number, screenPosition: number): boolean => {\n\n            return cursorPosition >= bottomOrLeftEdgeOfScreen\n                && cursorPosition < screenPosition + squaresFromEdgeBeforeMoving\n                && screenPosition > bottomOrLeftEdgeOfScreen;\n        },\n        cursorAtTopOrRightOfScreen = (\n\n            cursorPosition: number,\n            screenPosition: number,\n            edgeOfScreen: number,\n            edgeOfMap: number\n\n        ): boolean => {\n\n            return cursorPosition < edgeOfMap\n                && cursorPosition > screenPosition + edgeOfScreen - squaresFromEdgeBeforeMoving\n                && screenPosition < edgeOfMap - cursorBoundary;\n        };\n\n\treturn {\n\n        width:(): number => screenDimensions.width,\n        height:(): number => screenDimensions.height,\n        pixels:(): number => screenDimensions.width * screenDimensions.height,\n        dimensions:(): Dimensions => dimensions,\n        position:(): Position => screenPosition,\n        top:(): number => screenPosition.y,\n        bottom:(): number => screenPosition.y + dimensions.height,\n        left:(): number => screenPosition.x,\n        right:(): number => screenPosition.x + dimensions.width,\n        focused:(): boolean => focused,\n\t\tsetDimensions({width, height}:Dimensions, baseSize: number): ScreenController {\n\n\t\t\tscreenDimensions = createDimensions(width, height);\n\t\t\tdimensions = screenDimensions.scaleToGrid(baseSize);\n\n\t\t\treturn this;\n\t\t},\n        reset(): ScreenController {\n\n            ['actionHud', 'damageDisplay', 'buildUnitScreen', 'unitInfoScreen', 'optionsMenu']\n                .forEach((screen) => app.dom.remove(screen));\n\n            app.coStatus.show();\n            app.hud.show();\n            app.options.deactivate();\n            app.path.clear();\n            app.range.clear();\n            cursor.deselect();\n            cursor.show();\n\n            animation.show('cursor', 'unit', 'effects');\n\n            return this;\n        },\n        scroll(): ScreenController {\n\n            const cursorLocation = cursor.position();\n\n            listOfAxis.forEach((axis) => {\n\n                const\n                    edgeOfMap = mapDimensions[axis],\n                    edgeOfScreen = dimensions[axis],\n                    cursorPosition = cursorLocation[axis],\n                    position = screenPosition[axis];\n\n                if (cursorAtBottomOrLeftOfScreen(cursorPosition, position)) {\n\n                    screenPosition[axis] -= 1;\n                }\n\n                if (cursorAtTopOrRightOfScreen(cursorPosition, position, edgeOfScreen, edgeOfMap)) {\n\n                    screenPosition[axis] += 1;\n                }\n            });\n\n            refreshScreen();\n\n            return this;\n        },\n        moveTo(coordinates): ScreenController {\n\n            cursor.setPosition(coordinates);\n\n            listOfAxis.forEach((axis) => {\n\n                const\n                    target = coordinates[axis],\n                    leftOrBottomEdgeOfScreen = screenPosition[axis],\n                    rightOrTopEdgeOfScreen = screenPosition[axis] + dimensions[axis],\n                    middleOfScreen = rightOrTopEdgeOfScreen - Math.ceil(dimensions[axis] / 2);\n\n                let\n                    sign = -1,\n                    limit = -1,\n                    distance = middleOfScreen - target,\n                    view = leftOrBottomEdgeOfScreen;\n\n                if (target > middleOfScreen) {\n\n                    sign = 1;\n                    limit = mapDimensions[axis];\n                    distance = target - middleOfScreen;\n                    view = rightOrTopEdgeOfScreen;\n                }\n\n                moveScreen(distance, view, limit, sign, axis);\n            });\n\n            return this;\n\t\t},\n        focus(): ScreenController {\n\n            const\n                holdingDownFocusKey = app.key.pressed(app.key.map()) && app.key.undo(app.key.map()),\n                releasedFocusKey = app.key.keyUp(app.key.map()) && app.key.undoKeyUp(app.key.map());\n\n            if (releasedFocusKey) {\n\n                app.hud.show();\n                app.coStatus.show();\n                cursor.show();\n\n                focused = false;\n\n            } else if (holdingDownFocusKey && !focused) {\n\n                app.hud.hideCurrentElement();\n                app.coStatus.hideCurrentElement();\n                cursor.hideCurrentElement();\n\n                focused = true;\n            }\n\n            refreshMap();\n\n            return this;\n        },\n        withinDimensions({x, y}: Position): boolean {\n\n            const\n                edgeOfBottomOrLeftScreen = 0,\n                screenPositionX = screenPosition.x,\n                screenPositionY = screenPosition.y;\n\n            return x >= edgeOfBottomOrLeftScreen + screenPositionX\n                && y >= edgeOfBottomOrLeftScreen + screenPositionY\n                && x <= screenDimensions.width + screenPositionX\n                && y <= screenDimensions.height + screenPositionY;\n        }\n    };\n}"]}