{"version":3,"file":"gamePlaySocketListener.js","sourceRoot":"","sources":["gamePlaySocketListener.ts"],"names":[],"mappings":"AAGA,OAAO,EAAU,MAAM,EAAC,MAAM,gBAAgB,CAAC;AAM/C,MAAM,CAAC,OAAO,WAAU,OAAsB,EAAE,SAAuB;IAEnE,MAAM,cAAc,GAAG,CAAC,MAAW,KAAa,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;IAElF,MAAM,CAAC;QAEH,OAAO,EAAE,CAAC,KAAY,EAAE,IAAS,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;QACrG,QAAQ,EAAE,CAAC,KAAY,EAAE,IAAS,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC;QACvG,MAAM,EAAE,CAAC,KAAY,EAAE,IAAS,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC;QACnG,SAAS,EAAE,CAAC,KAAY,EAAE,KAAU,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC;QACtG,QAAQ,EAAE,CAAC,KAAY,EAAE,KAAU,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC;QACrG,MAAM,EAAC,CAAC,KAAY,EAAE,IAAS,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC;QAClG,OAAO,EAAC,CAAC,KAAY,EAAE,QAAkB,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC;QACjH,OAAO,EAAC,CAAC,KAAY,EAAE,IAAS,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;QACpG,MAAM,EAAC,CAAC,KAAY,EAAE,IAAS,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC;QAClG,MAAM,EAAC,CAAC,KAAY,EAAE,MAAW,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC;QACtG,UAAU,EAAC,CAAC,KAAY,EAAE,MAAW,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC;QAC9G,WAAW,EAAC,CAAC,KAAY,EAAE,IAAU,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;QACtG,oBAAoB,EAAC,CAAC,KAAY,EAAE,IAAU,EAAE,MAAW,KAAW,cAAc,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;QAClH,MAAM,EAAC,CAAC,KAAY,EAAE,EAAC,MAAM,EAAC,EAAE,MAAW;YAEvC,MAAM,MAAM,GAAW,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAChD,MAAM,IAAI,GAAY,MAAM,CAAC,IAAI,EAAE,EAC/B,QAAQ,GAAc,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAEpD,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA,CAAC;gBAEd,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YACpD,CAAC;QACL,CAAC;KACJ,CAAC;AACN,CAAC","sourcesContent":["import {Game} from \"./game\";\nimport {Building} from \"./map/elements/building/building\";\nimport {Client} from \"../clients/client\";\nimport {AnyRoom, isRoom} from \"../rooms/rooms\";\nimport {AnyPlayer} from \"../users/players/playerSocketListener\";\nimport {ClientHandler} from \"../clients/clients\";\nimport {AiController} from \"../users/ai/aiController\";\nimport {Player} from \"../users/players/player\";\n\nexport default function(clients: ClientHandler, aiHandler: AiController) {\n\n    const playerBySocket = (socket: any): Player => clients.bySocket(socket).player();\n\n    return {\n\n        addUnit: (error: Error, unit: any, socket: any): void => playerBySocket(socket).addUnit(unit, socket),\n        moveUnit: (error: Error, unit: any, socket: any): void => playerBySocket(socket).moveUnit(unit, socket),\n        attack: (error: Error, unit: any, socket: any): void => playerBySocket(socket).attack(unit, socket),\n        joinUnits: (error: Error, units: any, socket: any): void => playerBySocket(socket).join(units, socket),\n        loadUnit: (error: Error, units: any, socket: any): void => playerBySocket(socket).load(units, socket),\n        unload:(error: Error, unit: any, socket: any): void => playerBySocket(socket).unload(unit, socket),\n        capture:(error: Error, building: Building, socket: any): void => playerBySocket(socket).capture(building, socket),\n        endTurn:(error: Error, turn: any, socket: any): void => playerBySocket(socket).endTurn(turn, socket),\n        delete:(error: Error, unit: any, socket: any): void => playerBySocket(socket).delete(unit, socket),\n        defeat:(error: Error, player: any, socket: any): void => playerBySocket(socket).defeat(player, socket),\n        cursorMove:(error: Error, cursor: any, socket: any): void => playerBySocket(socket).moveCursor(cursor, socket),\n        confirmSave:(error: Error, game: Game, socket: any): void => playerBySocket(socket).save(game, socket),\n        confirmationResponse:(error: Error, game: Game, socket: any): void => playerBySocket(socket).confirm(game, socket),\n        aiTurn:(error: Error, {player}, socket: any): void => {\n\n            const client: Client = clients.bySocket(socket);\n            const room: AnyRoom = client.room(),\n                aiPlayer: AnyPlayer = room.getPlayer(player.id);\n\n            if (isRoom(room)){\n\n                aiHandler.get(aiPlayer.id).play(room.getGame());\n            }\n        },\n    };\n}\n"]}