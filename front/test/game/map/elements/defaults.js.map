{"version":3,"file":"defaults.js","sourceRoot":"","sources":["defaults.ts"],"names":[],"mappings":"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","sourcesContent":["import buildingController from \"./building/buildingController\";\nimport {Unit} from \"./unit/unit\";\nimport {Building} from \"./building/building\";\nimport {Terrain} from \"./terrain/terrain\";\n\ninterface Element {\n\n    name: string\n    type: string\n}\n\nexport type MapElement = Terrain | Building | Unit;\n\nexport default function(units, buildings, terrain) {\n\n\tconst\n        defaultHealth: number = 100,\n\t\telements = {\n            unit: units,\n            building: buildings,\n            terrain: terrain\n        },\n\t    healing = {\n\n            hq:[\"foot\", \"wheels\"],\n            city:[\"foot\", \"wheels\"],\n            base:[\"foot\", \"wheels\"],\n            seaport:[\"boat\"],\n            airport:[\"flight\"]\n        },\n        get = (element: Element): any => {\n\n\t        const\n                type = element.type.toLowerCase(),\n                name = element.name.toLowerCase();\n\n            return elements[type][name];\n        },\n        property = (element: Element): any => get(element).properties;\n\n\treturn {\n\n\t\tname(type: string): string {\n\n            return Object.keys(elements).reduce((nameOfElement,mapElement, mapElements) => {\n\n                const\n                    elements = mapElements[mapElement],\n                    element = elements[type],\n                    foundName: string = element.name,\n                    nameNotFoundBefore: boolean = !nameOfElement;\n\n                return foundName && nameNotFoundBefore ? foundName : nameOfElement;\n            });\n\t\t},\n        canHeal(building: Element): string[] {\n\n            const name: string = building.name;\n\n            return healing[name.toLowerCase()];\n        },\n\t\tmovementCost(unit: Element, obstacle: Element): number {\n\n\t\t\tconst\n                name: string = obstacle.name.toLowerCase(),\n                key = {\n                    plains: \"plain\",\n                    woods: \"wood\",\n                    base: \"building\",\n                    seaport: \"building\",\n                    airport: \"building\",\n                    hq: \"building\"\n                }[name];\n\n\t\t\treturn property(unit).movementCosts[key || name];\n\t\t},\n        find: (type: string) => elements.unit[type],\n        ammo: (unit: Element): number => property(unit).ammo,\n        fuel: (unit: Element): number => property(unit).fuel,\n        movement: (unit: Element): number => property(unit).movement,\n        vision: (unit: Element): number => property(unit).vision,\n        canAttack: (unit: Element): boolean => property(unit).canAttack,\n        range: (unit: Element): number => property(unit).range,\n        damageType: (unit: Element): string => property(unit).damageType,\n\t\tmovable: (unit: Element): boolean => property(unit).movable,\n\t\ttransportation: (unit: Element): string => property(unit).transportation,\n\t\tcapture: (unit: Element): boolean => property(unit).capture,\n\t\tweapon1: (unit: Element): string => property(unit).weapon1,\n\t\tweapon2: (unit: Element): string => property(unit).weapon2,\n\t\tmaxLoad: (unit: Element): number => property(unit).maxLoad,\n\t\tload: (unit: Element): boolean => property(unit).load,\n\t\tloaded: (unit: Element): Unit[] => property(unit).loaded,\n        cost: (unit: Element): number => get(unit).cost,\n        health: (): number => defaultHealth\n\t};\n};"]}