{"version":3,"file":"animationHandler.js","sourceRoot":"","sources":["animationHandler.ts"],"names":[],"mappings":";;AAAA,yDAA2E;AAa3E,mBAAwB,GAAG,kBAA4B;IAEnD,MAEI,MAAM,GAAkB,0BAAa,EAAE,EACvC,UAAU,GAAG,CAAC,WAAqB,KAAW,WAAW,CAAC,OAAO,CAAC,CAAC,IAAY,KAAoB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAC3H,OAAO,GAAG,CAAC,IAAa,EAAE,WAAqB;QAE3C,MAAM,CAAC,qBAAqB,CAAC;YAEzB,WAAW,CAAC,OAAO,CAAC,CAAC,uBAA+B;gBAEhD,MAAM,aAAa,GAAqB,MAAM,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;gBAE5E,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oBAEhB,aAAa,CAAC,MAAM,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC;gBACxD,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEN,EAAE,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;QAE5B,UAAU,CAAC,kBAAkB,CAAC,CAAC;IACnC,CAAC;IAED,MAAM,CAAC;QAEH,SAAS,EAAC,CAAC,IAAY,KAAuB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;QAC9D,IAAI,CAAC,GAAG,UAAoB;YAExB,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YAE3B,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,IAAI,CAAC,GAAG,UAAoB;YAExB,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YAE1B,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,UAAU,CAAC,UAAkB;YAEzB,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAE5C,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAEf,MAAM,CAAC,YAAY,CAAC,UAAU,EAAE,CAAA;YACpC,CAAC;QACL,CAAC;QACD,UAAU,CAAC,GAAG,WAAqB;YAE/B,UAAU,CAAC,WAAW,CAAC,CAAC;YAExB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;KACJ,CAAC;AACN,CAAC;AA1DD,4BA0DC","sourcesContent":["import {default as canvasHandler, CanvasHandler} from \"./canvasHandler.js\";\nimport {CanvasController} from \"./canvas\";\nimport {Dimensions} from \"./dimensions\";\n\nexport interface AnimationHandler {\n\n    getCanvas(name: string): CanvasController\n    show(...objectName: string[]): AnimationHandler\n    hide(...objectName: string[]): AnimationHandler\n    dimensions(objectName: string): Dimensions\n    initialize(...canvases: any[]): AnimationHandler\n}\n\nexport default function(...initialCanvasNames: string[]): AnimationHandler {\n\n    const\n\n        canvas: CanvasHandler = canvasHandler(),\n        initialize = (canvasNames: string[]): void => canvasNames.forEach((name: string): CanvasHandler => canvas.addElement(name)),\n        animate = (hide: boolean, objectNames: string[]): void => {\n\n            window.requestAnimationFrame(() => {\n\n                objectNames.forEach((nameOfCanvasToBeRedrawn: string): void => {\n\n                    const currentCanvas: CanvasController = canvas.get(nameOfCanvasToBeRedrawn);\n\n                    if (currentCanvas) {\n\n                        currentCanvas.render(nameOfCanvasToBeRedrawn, hide);\n                    }\n                });\n            });\n        };\n\n    if (initialCanvasNames.length) {\n\n        initialize(initialCanvasNames);\n    }\n\n    return {\n\n        getCanvas:(name: string): CanvasController => canvas.get(name),\n        show(...objectName: string[]): AnimationHandler {\n\n            animate(false, objectName);\n\n            return this;\n        },\n        hide(...objectName: string[]): AnimationHandler {\n\n            animate(true, objectName);\n\n            return this;\n        },\n        dimensions(objectName: string): Dimensions {\n\n            const storedCanvas = canvas.get(objectName);\n\n            if (storedCanvas) {\n\n                return storedCanvas.dimensions()\n            }\n        },\n        initialize(...canvasNames: string[]): AnimationHandler {\n\n            initialize(canvasNames);\n\n            return this;\n        }\n    };\n}"]}