{"version":3,"file":"drawingController.js","sourceRoot":"","sources":["drawingController.ts"],"names":[],"mappings":"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","sourcesContent":["import {default as createPosition, Position} from \"../../game/map/elements/position\";\nimport curry from \"../../tools/curry\";\nimport screenConfiguration from \"../configuration/screenConfig\";\nimport {default as createDimensions, Dimensions} from \"./dimensions\";\nimport {default as createDrawingCache, DrawingCache} from \"./drawingTool\";\nimport app = require('../configuration/settings/app.js');\n\napp.map = require('../controller/mapController.js');\napp.background = require('../effects/background.js');\n\nexport interface DrawingController {\n\n    hide(): DrawingController;\n    background(): DrawingController;\n    building(): DrawingController;\n    terrain(): DrawingController;\n    unit(): DrawingController;\n    weather(): DrawingController;\n    hudCanvas(elementName: string, elementType: string): DrawingController;\n    effects(): DrawingController;\n    cursor(): DrawingController;\n}\n\nexport default function(canvas: any, context: any, {width, height}: Dimensions, base: number): DrawingController {\n\n    const\n        numberOfVerticalGridSquares: number = screenConfiguration.numberOfVerticalGridSquares,\n        numberOfHorizontalGridSquares: number = screenConfiguration.numberOfHorizontalGridSquares,\n        offsetNeededToCenterDrawing: number = 2,\n\n        pixelWidthOfGridSquare = width / numberOfHorizontalGridSquares,\n        pixelHeightOfGridSquare = height / numberOfVerticalGridSquares,\n\n        xOffset = pixelWidthOfGridSquare / offsetNeededToCenterDrawing,\n        yOffset = pixelHeightOfGridSquare / offsetNeededToCenterDrawing,\n\n        gridSquareDimensions = createDimensions(\n            pixelWidthOfGridSquare,\n            pixelHeightOfGridSquare,\n        ),\n\n        drawings: DrawingCache = createDrawingCache(\n            canvas,\n            context,\n            gridSquareDimensions,\n            base,\n            offsetNeededToCenterDrawing,\n        ),\n\n        modifyCoordinatesForScrolling = (coordinate: number, dimension: number, position: number): number => {\n\n            return (coordinate * dimension) - (position * dimension);\n        },\n\n        drawToCanvas = (name: string, position: Position): void => {\n\n            const\n                getDrawing: any = drawings.isCached(name) ? drawings.get : drawings.draw,\n                x: number = position.x - xOffset,\n                y: number = position.y - yOffset,\n                drawing: any = getDrawing(name);\n\n            canvas.drawImage(drawing, x, y);\n        },\n\n        drawMapElements = (elements: any, screenPosition?: Position): void => {\n\n            elements.forEach((element) => {\n\n                const\n                    {x, y} = element.position,\n                    positionOfDrawing = createPosition(\n\n                        modifyCoordinatesForScrolling(x, screenPosition.x, pixelWidthOfGridSquare),\n                        modifyCoordinatesForScrolling(y, screenPosition.y, pixelHeightOfGridSquare),\n                    );\n\n                if (gameScreen.withinDimensions(positionOfDrawing)) { // figure this out!!!\n\n                    drawToCanvas(element.name, positionOfDrawing);\n                }\n            });\n        },\n\n        fillScreen = (nameOfMapElement: string, dimensions?: Dimensions): void => {\n\n            let x: number = dimensions.width,\n                y: number = dimensions.height;\n\n            while (x--) {\n                while (y--) {\n\n                    drawToCanvas(\n                        nameOfMapElement,\n                        createPosition(\n                            x * pixelWidthOfGridSquare,\n                            y * pixelHeightOfGridSquare,\n                        ),\n                    );\n                }\n            }\n        };\n\n    return {\n\n        hide: (): DrawingController => {\n\n            drawings.hideCurrentElement();\n\n            return this;\n        },\n        background(): DrawingController {\n\n            fillScreen(app.background.drawing());\n\n            return this;\n        },\n        building(): DrawingController {\n\n            drawMapElements(app.map.buildings());\n\n            return this;\n        },\n        terrain(): DrawingController {\n\n            drawMapElements(app.map.terrain());\n\n            return this;\n        },\n        unit(): DrawingController {\n\n            drawMapElements(app.map.units());\n\n            return this;\n        },\n        weather(): DrawingController {\n\n            console.log(\"To Do: Weather....\");\n\n            return this;\n        },\n        hudCanvas(elementName: string, elementType: string): DrawingController {\n\n            const\n                mapElementWithNoBackground: string = \"unit\",\n                position = createPosition(0, 0);\n\n            if (elementType !== mapElementWithNoBackground) {\n\n                drawToCanvas(\"plain\", position);\n            }\n\n            drawToCanvas(elementName, position);\n\n            return this;\n        },\n        effects(): DrawingController {\n\n            const\n                toDrawableObject = curry((name: string, position: Position): object => ({position, name})),\n                mapElements = [\n\n                    app.highlight.movementRange().map(toDrawableObject(\"movementRange\")),\n                    app.highlight.path().map(toDrawableObject(\"path\")),\n                    app.highlight.attackRange().map(toDrawableObject(\"attackRange\"))\n                ];\n\n            mapElements.forEach((elements) => drawMapElements(elements));\n\n            return this;\n        },\n        cursor(): DrawingController {\n\n            const\n                cursorIsActive = !app.cursor.hidden() && app.user.turn(),\n                targetIsActive = app.target.active();\n\n            if (targetIsActive) {\n\n                drawMapElements([{\n                    name: \"target\",\n                    position: app.target.position()\n                }]);\n            }\n            else if (cursorIsActive) {\n\n                drawMapElements([{\n                    name: \"cursor\",\n                    position: app.cursor.position()\n                }]);\n            }\n\n            return this;\n        }\n    };\n}"]}