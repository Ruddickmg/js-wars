{"version":3,"file":"identity.js","sourceRoot":"","sources":["identity.ts"],"names":[],"mappings":";;AAAA,6DAAuE;AASvE,mBAA4B,SAAa,EAAE,WAA2B,EAAE,WAA2B;IAE/F,MAAM,SAAS,GAAmB,4BAAU,EAAM,CAAC,QAAQ,EAAE,CAAC;IAC9D,MAAM,SAAS,GAAG,MAAU,SAAS,CAAC,GAAG,EAAE,CAAC;IAC5C,MAAM,cAAc,GAAG,MAAe,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;IACxD,MAAM,GAAG,GAAG;QAER,MAAM,KAAK,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;QAE9B,MAAM,CAAC,cAAc,EAAE,GAAG,KAAK,GAAG,SAAS,EAAE,CAAC;IAClD,CAAC,CAAC;IACF,MAAM,MAAM,GAAG,CAAC,QAAY;QAExB,EAAE,GAAG,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;QAE3D,MAAM,CAAC,EAAE,CAAC;IACd,CAAC,CAAC;IACF,MAAM,UAAU,GAAG,CAAC,WAAiB;QAEjC,MAAM,IAAI,GAAmB,4BAAU,EAAM,CAAC;QAE9C,WAAW,CAAC,OAAO,CAAC,CAAC,GAAO,KAAqB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAEjE,IAAI,CAAC,OAAO,CAAC,CAAC,MAAU;YAEpB,EAAE,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;YAErB,OAAO,EAAE,GAAG,MAAM,EAAE,CAAC;gBAEjB,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAEnB,EAAE,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;YACzB,CAAC;YAED,EAAE,GAAG,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC;IAEF,IAAI,EAAE,GAAO,SAAS,CAAC;IAEvB,MAAM,CAAC;QACH,GAAG;QACH,MAAM;QACN,UAAU;KACb,CAAC;AACN,CAAC;AA/CD,4BA+CC","sourcesContent":["import {BinaryHeap, default as binaryHeap} from \"./binaryHeap.test.js\";\n\nexport interface Identifier<Id> {\n\n    get(): Id;\n    remove(usableId: Id): Id;\n    reserveIds(reservedIds: Id[]): Identifier<Id>;\n}\n\nexport default function<Id>(initialId: Id, incrementId: (id: Id) => Id, decrementId: (id: Id) => Id): Identifier<Id> {\n\n    const usableIds: BinaryHeap<Id> = binaryHeap<Id>().setToMax();\n    const recycleId = (): Id => usableIds.pop();\n    const outOfStoredIds = (): boolean => !usableIds.size();\n    const get = (): Id => {\n\n        const newId = incrementId(id);\n\n        return outOfStoredIds() ? newId : recycleId();\n    };\n    const remove = (usableId: Id): Id => {\n\n        id > usableId ? usableIds.push(usableId) : decrementId(id);\n\n        return id;\n    };\n    const reserveIds = (reservedIds: Id[]): Identifier<Id> => {\n\n        const heap: BinaryHeap<Id> = binaryHeap<Id>();\n\n        reservedIds.forEach((key: Id): BinaryHeap<Id> => heap.push(key));\n\n        heap.forEach((usedId: Id): void => {\n\n            id = incrementId(id);\n\n            while (id < usedId) {\n\n                usableIds.push(id);\n\n                id = incrementId(id);\n            }\n\n            id = usedId;\n        });\n\n        return this;\n    };\n\n    let id: Id = initialId;\n\n    return {\n        get,\n        remove,\n        reserveIds,\n    };\n}\n"]}