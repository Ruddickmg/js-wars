{"version":3,"file":"listener.js","sourceRoot":"","sources":["listener.ts"],"names":[],"mappings":";;AAYA;IAEI,IAAI,YAAY,GAAe,EAAE,CAAC;IAElC,MAAM,WAAW,GAAG,CAAC,QAAkB,EAAE,SAAqB;QAE1D,MAAM,iBAAiB,GAAe,SAAS,CAAC,KAAK,EAAE,CAAC;QAExD,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEjC,MAAM,CAAC,iBAAiB,CAAC;IAC7B,CAAC,CAAC;IAEF,MAAM,CAAC;QAEH,WAAW,CAAC,QAAkB;YAE1B,YAAY,GAAG,WAAW,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QACvD,CAAC;QACD,YAAY,CAAC,GAAG,SAAqB;YAEjC,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,QAAQ;gBAEhD,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YAE5C,CAAC,EAAE,YAAY,CAAC,CAAA;QACpB,CAAC;QACD,4BAA4B,CAAC,MAAW;YAEpC,YAAY,CAAC,OAAO,CAAC,CAAC,QAAkB;gBAEpC,MAAM,kBAAkB,GAAa,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAE3D,kBAAkB,CAAC,OAAO,CAAC,CAAC,SAAiB;oBAEzC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAY;wBAE9B,MACI,aAAa,GAAW,OAAO,CAAC,KAAK,EACrC,KAAK,GAAG,aAAa,GAAG,IAAI,KAAK,CAAC,aAAa,CAAC,GAAG,SAAS,CAAC;wBAEjE,QAAQ,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;oBAChD,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAA;QACN,CAAC;KACJ,CAAA;AACL,CAAC;AA/CD,4BA+CC;AAAA,CAAC","sourcesContent":["export interface Listener {\n\n    [index: string]: (error: Error, data: any, socket: any) => void\n}\n\nexport interface SocketListeners {\n\n    addListener(listeners: Listener)\n    addListeners(...listeners: Listener[])\n    listenForSocketCommunication(socket:any): void\n}\n\nexport default function(): SocketListeners {\n\n    let allListeners: Listener[] = [];\n\n    const addListener = (listener: Listener, listeners: Listener[]): Listener[] => {\n\n        const modifiedListeners: Listener[] = listeners.slice();\n\n        modifiedListeners.push(listener);\n\n        return modifiedListeners;\n    };\n\n    return {\n\n        addListener(listener: Listener) {\n\n            allListeners = addListener(listener, allListeners);\n        },\n        addListeners(...listeners: Listener[]) {\n\n            allListeners = listeners.reduce((listeners, listener) => {\n\n                return addListener(listener, listeners);\n\n            }, allListeners)\n        },\n        listenForSocketCommunication(socket: any){\n\n            allListeners.forEach((listener: Listener) => {\n\n                const listenerDirectives: string[] = Object.keys(listener);\n\n                listenerDirectives.forEach((directive: string) => {\n\n                    socket.on(directive, (message: any): void => {\n\n                        const\n                            errorReported: string = message.error,\n                            error = errorReported ? new Error(errorReported) : undefined;\n\n                        listener[directive](error, message, socket);\n                    });\n                });\n            })\n        }\n    }\n};\n"]}