{"version":3,"file":"routes.js","sourceRoot":"","sources":["routes.ts"],"names":[],"mappings":"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","sourcesContent":["import {Client} from \"../clients/client\";\nimport {ClientHandler} from \"../clients/clients\";\nimport {Game} from \"../game/game\";\nimport {AnyRoom, isRoom, Rooms} from \"../rooms/rooms\";\nimport {default as time, Time} from \"../tools/calculations/time.js\";\nimport {User} from \"../users/user\";\nimport {Backend, default as initBackend} from \"./backend.js\";\nimport {Connections, default as connections} from \"./connections.js\";\n\nconst connection: Connections = connections(process.env);\n\nexport default function(app: any, rooms: Rooms, clients: ClientHandler, root: string): void {\n\n    const url: string = connection.backend().url;\n    const periodOfTime: Time = time();\n    const backend: Backend = initBackend(url);\n    const syncDatabaseIdsWithRoomIds = (): void => {\n\n        backend.sync()\n            .then((ids) => rooms.addReservedIds(ids))\n            .catch((err) => console.log(err));\n    };\n    const initializeDatabase = (): Promise<any> => {\n\n        const errorMessage: string = \"Could not initialize database, connection timed out.\";\n        const secondsTillTimeout: number = periodOfTime.seconds(5);\n        const repeatedlyAttemptMigration = (): Promise<any> => backend.migrate()\n            .then((res) => Promise.resolve(res))\n            .catch(() => repeatedlyAttemptMigration());\n\n        return Promise.race([\n            repeatedlyAttemptMigration(),\n            periodOfTime.wait(secondsTillTimeout)\n                .then(() => Promise.reject(new Error(errorMessage))),\n        ]);\n    };\n\n    initializeDatabase()\n        .then(() => syncDatabaseIdsWithRoomIds())\n        .catch((err) => console.log(err));\n\n    app.get(\"/\", (_: any, res: any): void => {\n\n        res.sendFile(`${root}/index.html`);\n    });\n\n    app.get(\"/games/open/:category\", (req: any, res: any): void => {\n\n        res.json(rooms.getOpenRooms(req.params.category) || []);\n        res.end();\n    });\n\n    app.get(\"/games/running/:category\", (req: any, res: any): void => {\n\n        res.json(rooms.getRunningRooms(req.params.category) || []);\n        res.end();\n    });\n\n    app.get(\"/games/saved/:id\", (req: any, res: any): void => {\n\n        const id: string = req.params.id;\n\n        backend.getGames(id)\n            .then((game: Game[]) => {\n\n                res.json(game);\n                rooms.matchRunningGames(game);\n            })\n            .catch((error: Error) => console.log(error));\n    });\n\n    app.get(\"/maps/type/:category\", (req: any, res: any): void => {\n\n        backend.getMaps(req.params.category)\n            .then((maps) => res.json(maps))\n            .catch((err) => console.log(err));\n    });\n\n    app.post(\"/maps/save\", (req: any, res: any): void => {\n\n        backend.saveMap(req.body)\n            .then((map) => res.json(map))\n            .catch((err) => console.log(err));\n    });\n\n    app.post(\"/users/save\", (req: any, res: any): void => {\n\n        // reminder\n        console.log(\"handle validation etc before going live\");\n\n        // save the user and update its id from the database\n        backend.saveUser(req.body)\n            .then((response) => {\n\n                res.json(response);\n                clients.updateUser(response, req.body.id);\n            })\n            .catch((error) => console.log(error));\n    });\n\n    app.post(\"/users/oauth\", (req: any): void => {\n\n        const id: string = req.body.id;\n\n        backend.getUser(req.body.origin, id)\n            .then((response) => clients.updateUser(response, id))\n            .catch((error) => console.log(error));\n    });\n\n    app.post (\"/games/save\", (req: any, res: any): void => {\n\n        const game: Game = req.body.game;\n        const user: User = req.body.user;\n        const client: Client = clients.byId(user.id);\n        const room: AnyRoom = client.room();\n\n        if (isRoom(room)) {\n\n            game.id = room.getGame().id;\n\n            backend.saveGame(JSON.stringify(game))\n                .then((receivedGame) => res.json(receivedGame))\n                .catch((error) => console.log(error));\n        }\n    });\n\n    app.delete(\"/games/remove/:id\", (_: any, res: any): void => {\n\n        backend.deleteGame(id)\n            .then((gameRemovalStatus) => res.json(gameRemovalStatus))\n            .catch((error) => console.log(error));\n    });\n\n    app.delete(\"/maps/remove/:id\", (_: any, res: any): void => {\n\n        backend.deleteMap(id)\n            .then((mapRemovalStatus) => res.json(mapRemovalStatus))\n            .catch((error) => console.log(error));\n    });\n\n    app.delete(\"/users/remove/:id\", (_: any, res: any): void => {\n\n        backend.deleteUser(id)\n            .then((userRemovalStatus) => res.json(userRemovalStatus))\n            .catch((error) => console.log(error));\n    });\n}"]}