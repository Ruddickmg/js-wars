{"version":3,"file":"clients.js","sourceRoot":"","sources":["clients.ts"],"names":[],"mappings":"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","sourcesContent":["import {default as createClient, Client} from \"./client.js\";\nimport {default as socketHandler, SocketHandler} from \"../connections/sockets/socketHandler.js\";\nimport {default as createPlayer, Player} from \"../users/players/player\";\nimport {User, UserId} from \"../users/user\";\nimport {AnyRoom, isRoom} from \"../rooms/rooms\";\n\nexport type ClientId = string | number;\n\nexport interface ClientHandler {\n\n    bySocket(socket: any): Client,\n    byId(id: ClientId): Client,\n    remove(id: ClientId): Client,\n    wasDisconnected(id: ClientId): boolean,\n    add(socket: any, id: ClientId): Client,\n    disconnect(socket: any): ClientHandler,\n    reconnect(id: ClientId): Client,\n    removeTimedOutDisconnections(timeAllowedToReconnect: number): ClientHandler,\n    updateUser(user: any, id: UserId): Clients,\n}\n\ninterface DisconnectedClient {\n\n    client: Client,\n    timeOfDisconnect: Date\n}\n\ninterface Clients {\n\n    [index: string]: Client\n}\n\ninterface DisconnectedClients {\n\n    [index: string]: DisconnectedClient\n}\n\ntype AllClients = Clients | DisconnectedClients;\ntype AnyClient = Client | DisconnectedClient;\n\nexport default function(): ClientHandler {\n\n    let\n        connectedClients: Clients = {},\n        disconnectedClients: DisconnectedClients = {};\n\n    const\n        socketIds: SocketHandler = socketHandler(),\n        getClientBySocket = (socket: any, listOfClients: Clients): Client => listOfClients[socketIds.getId(socket)],\n        getClientById = (id: ClientId, listOfClients: AllClients): AnyClient => listOfClients[id],\n        addClient = (client: AnyClient , id: ClientId, listOfClients: AllClients): AllClients => {\n\n            const modifiedClientList: AllClients = Object.assign({}, listOfClients);\n\n            modifiedClientList[id] = client;\n\n            return modifiedClientList;\n        },\n        removeClient = (id: ClientId, listOfClients: AllClients): AllClients => {\n\n            const modifiedClientList: AllClients = Object.assign({}, listOfClients);\n\n            delete modifiedClientList[id];\n\n            return modifiedClientList;\n        };\n\n    return {\n\n        bySocket: (socket: any): Client => getClientBySocket(socket, connectedClients),\n        byId: (id: ClientId): Client => <Client>getClientById(id, connectedClients),\n        remove: (id: ClientId): Client => {\n\n            const removedClient: Client = <Client>getClientById(id, connectedClients);\n\n            connectedClients = <Clients>removeClient(id, connectedClients);\n\n            return removedClient;\n        },\n        wasDisconnected: (id: ClientId): boolean => disconnectedClients.hasOwnProperty(`${id}`),\n        add(socket: any, id: ClientId): Client {\n\n            const client: Client = createClient(socket);\n\n            socketIds.setId(socket, id);\n\n            connectedClients = <Clients>addClient(client, id, connectedClients);\n\n            return client;\n        },\n        disconnect(socket: any): ClientHandler {\n\n            const\n                id: ClientId = socketIds.getId(socket),\n                client: Client = <Client>getClientById(id, connectedClients),\n                timeOfDisconnect = new Date();\n\n            client.disconnect();\n\n            disconnectedClients = <DisconnectedClients>addClient({client, timeOfDisconnect}, id, disconnectedClients);\n\n            connectedClients = <Clients>removeClient(id, connectedClients);\n\n            return this;\n        },\n        reconnect(id: ClientId): Client {\n\n            const\n                connection: DisconnectedClient = <DisconnectedClient>getClientById(id, disconnectedClients),\n                client = connection.client;\n\n            disconnectedClients = <DisconnectedClients>removeClient(id, disconnectedClients);\n\n            connectedClients = <Clients>addClient(client, id, connectedClients);\n\n            return client;\n        },\n        removeTimedOutDisconnections(timeAllowedToReconnect: number): ClientHandler {\n\n            const\n                disconnectedClientIds = Object.keys(disconnectedClients),\n                now = new Date();\n\n            disconnectedClients = disconnectedClientIds.reduce((clients: DisconnectedClients, id: ClientId) => {\n\n                const connection: DisconnectedClient = <DisconnectedClient>getClientById(id, disconnectedClients);\n\n                let clientsWithinTimeLimit = clients;\n\n                if (Number(now) - Number(connection.timeOfDisconnect) < timeAllowedToReconnect) {\n\n                    clientsWithinTimeLimit = <DisconnectedClients>addClient(connection, id, clientsWithinTimeLimit);\n\n                } else {\n\n                    socketIds.remove(connection.client.socket());\n                }\n\n                return clientsWithinTimeLimit;\n\n            }, {});\n\n            return this;\n        },\n        updateUser(user: User, id: UserId): Clients {\n\n            const\n                client: Client = this.remove(id),\n                room: AnyRoom = client.room(),\n                player: Player = createPlayer(user);\n\n            if (isRoom(room) && client) {\n\n                room.replacePlayer(id, player);\n                this.addElement(client.socket(), id);\n            }\n\n            return this;\n        }\n    };\n}"]}