{"version":3,"file":"client.js","sourceRoot":"","sources":["client.ts"],"names":[],"mappings":";;AACA,0CAA+C;AAqB/C,mBAAwB,aAAkB;IAEtC,IACI,IAAI,GAAY,SAAS,EACzB,IAAI,GAAS,SAAS,EACtB,MAAM,GAAW,SAAS,EAC1B,MAAM,GAAG,aAAa,CAAC;IAE3B,MACI,oBAAoB,GAAG,CAAC,MAAc,EAAE,IAAa;QAEjD,EAAE,CAAC,CAAC,cAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEf,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAE9B,CAAC;QAAC,IAAI,CAAC,CAAC;YAEJ,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACjC,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC,EACD,SAAS,GAAG,CAAC,IAAY,EAAE,KAAU,EAAE,WAAiB,IAAI,CAAC,IAAI,EAAE;QAEnE,MAAM,CAAC,SAAS;aACX,MAAM,CAAC,QAAQ,CAAC;aAChB,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,MAAM,CAAC;QAEH,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,IAAI,EAAE,MAAe,IAAI;QACzB,MAAM,EAAE,MAAW,MAAM;QACzB,MAAM,EAAE,MAAc,MAAM;QAC5B,IAAI,EAAE,MAAY,IAAI;QACtB,SAAS,CAAC,IAAY,EAAE,KAAU;YAE/B,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAEtB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,WAAW,CAAC,IAAY,EAAE,KAAU;YAEhC,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;YAEhC,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,QAAQ,CAAC,WAAoB;YAEzB,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC;gBAElB,oBAAoB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACtC,CAAC;YAED,IAAI,GAAG,WAAW,CAAC;YAEnB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEvB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAET,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAC5B,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,SAAS,CAAC,aAAqB;YAE3B,MAAM,GAAG,aAAa,CAAC;YAEvB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,OAAO,CAAC,WAAiB;YAErB,IAAI,GAAG,WAAW,CAAC;YAEnB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,SAAS,CAAC,aAAkB;YAExB,MAAM,GAAG,aAAa,CAAC;YAEvB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,UAAU;YAEN,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YAE1B,EAAE,CAAC,CAAC,cAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBAEtC,SAAS,CAAC,cAAc,EAAE,EAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,MAAM,EAAC,CAAC,CAAC;YAC9D,CAAC;YAED,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAET,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YACtC,CAAC;YAED,oBAAoB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAEnC,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;KACJ,CAAC;AACN,CAAC;AAzGD,4BAyGC","sourcesContent":["import {Room} from \"../rooms/room\";\nimport {AnyRoom, isRoom} from \"../rooms/rooms\";\nimport {Player} from \"../users/players/player\";\nimport {Lobby} from \"../rooms/lobby\";\nimport {User} from \"../users/user\";\n\nexport interface Client {\n\n    emit: Function,\n    room(): AnyRoom,\n    socket(): any,\n    player(): Player,\n    user(): User,\n    broadcast(path: string, value: any): Client,\n    emitToLobby(path: string, value: any): Client,\n    joinRoom(currentRoom: AnyRoom): AnyRoom,\n    setPlayer(currentPlayer: Player): Client,\n    setUser(currentUser: User): Client,\n    setSocket(currentSocket: any): Client,\n    disconnect(): Client\n}\n\nexport default function(initialSocket: any): Client {\n\n    let\n        room: AnyRoom = undefined,\n        user: User = undefined,\n        player: Player = undefined,\n        socket = initialSocket;\n\n    const\n        removePlayerFromRoom = (player: Player, room: AnyRoom): Player => {\n\n            if (isRoom(room)) {\n\n                room.removePlayer(player);\n\n            } else {\n\n                room.removePlayer(player.id);\n            }\n\n            return player;\n        },\n        broadcast = (path: string, value: any, roomName: string=room.name()) => {\n\n        socket.broadcast\n            .moveTo(roomName)\n            .emit(path, value);\n    };\n\n    return {\n\n        emit: socket.emit,\n        room: (): AnyRoom => room,\n        socket: (): any => socket,\n        player: (): Player => player,\n        user: (): User => user,\n        broadcast(path: string, value: any): Client {\n\n           broadcast(path, value);\n\n            return this;\n        },\n\n        emitToLobby(path: string, value: any): Client {\n\n            broadcast(path, value, \"lobby\");\n\n            return this;\n        },\n\n        joinRoom(currentRoom: AnyRoom): Room | Lobby {\n\n            if (room && player) {\n\n               removePlayerFromRoom(player, room);\n            }\n\n            room = currentRoom;\n\n            socket.join(room.name);\n\n            if (player) {\n\n                room.addElement(player);\n            }\n\n            return room;\n        },\n        setPlayer(currentPlayer: Player): Client {\n\n            player = currentPlayer;\n\n            return this;\n        },\n        setUser(currentUser: User): Client {\n\n            user = currentUser;\n\n            return this;\n        },\n        setSocket(currentSocket: any): Client {\n\n            socket = currentSocket;\n\n            return this;\n        },\n        disconnect(): Client {\n\n            socket.leave(room.name());\n\n            if (isRoom(room) && room.hasBeenSaved()) {\n\n                broadcast(\"userLeftRoom\", {room: room.getGame(), player});\n            }\n\n            if (player) {\n\n                broadcast(\"disconnected\", player);\n            }\n\n            removePlayerFromRoom(player, room);\n\n            return this;\n        }\n    };\n}"]}